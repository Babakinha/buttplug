#+OPTIONS: toc:nil
* Summary
:PROPERTIES:
:EXPORT_FILE_NAME: SUMMARY.md
:END:

#+BEGIN_SRC emacs-lisp :exports results :results value raw replace
(org-build-gitbook-toc)
#+END_SRC

- [[file:README.md#the-buttplug-sex-toy-control-standard][The Buttplug Sex Toy Control Standard]]
  - [[file:README.md#the-need-for-a-sex-toy-control-standard][The Need for a Sex Toy Control Standard]]
  - [[file:README.md#generalized-control][Generalized Control]]
  - [[file:README.md#comparisons-to-existing-software][Comparisons to Existing Software]]
  - [[file:README.md#why-is-it-called-buttplug][Why is it called Buttplug?]]
- [[file:architecture.md#architecture][Architecture]]
  - [[file:architecture.md#implementation-types][Implementation Types]]
    - [[file:architecture.md#libraries][Libraries]]
    - [[file:architecture.md#servers][Servers]]
    - [[file:architecture.md#applications-aka-clients][Applications (aka Clients)]]
  - [[file:architecture.md#protocol][Protocol]]
  - [[file:architecture.md#stages][Stages]]
    - [[file:architecture.md#identification][Identification]]
    - [[file:architecture.md#enumeration][Enumeration]]
    - [[file:architecture.md#consummation][Consummation]]
- [[file:usages.md#usage-examples][Usage Examples]]
  - [[file:usages.md#library-embedded-in-a-video-game][Library Embedded in a Video Game]]
  - [[file:usages.md#web-based-hardware-synced-movie-player][Web Based Hardware Synced Movie Player]]
----
- [[file:messages.md#messages][Messages]]
  - [[file:messages.md#basic-message-structure][Basic Message Structure]]
  - [[file:messages.md#message-flow][Message Flow]]
  - [[file:messages.md#a-note-on-scaling][A Note On Scaling]]
  - [[file:messages.md#json-message-serialization][JSON Message Serialization]]
  - [[file:messages.md#adding-new-messages][Adding New Messages]]
  - [[file:messages.md#message-description-template][Message Description Template]]
- [[file:status.md#status-messages][Status Messages]]
  - [[file:status.md#ok][Ok]]
  - [[file:status.md#error][Error]]
  - [[file:status.md#ping][Ping]]
  - [[file:status.md#request-log][RequestLog]]
  - [[file:status.md#log][Log]]
- [[file:identification.md#identification-messages][Identification Messages]]
  - [[file:identification.md#request-server-info][RequestServerInfo]]
  - [[file:identification.md#server-info][ServerInfo]]
- [[file:enumeration.md#enumeration-messages][Enumeration Messages]]
  - [[file:enumeration.md#start-scanning][StartScanning]]
  - [[file:enumeration.md#stop-scanning][StopScanning]]
  - [[file:enumeration.md#scanning-finished][ScanningFinished]]
  - [[file:enumeration.md#request-device-list][RequestDeviceList]]
  - [[file:enumeration.md#device-list][DeviceList]]
  - [[file:enumeration.md#device-added][DeviceAdded]]
  - [[file:enumeration.md#device-removed][DeviceRemoved]]
  - [[file:enumeration.md#stop-device][StopDevice]]
  - [[file:enumeration.md#stop-all-devices][StopAllDevices]]
- [[file:generic.md#generic-device-messages][Generic Device Messages]]
  - [[file:generic.md#single-motor-vibrate-cmd][SingleMotorVibrateCmd]]
  - [[file:generic.md#raw-cmd][RawCmd]]
- [[file:specific.md#specific-device-messages][Specific Device Messages]]
  - [[file:specific.md#kiiro-cmd][KiiroCmd]]
  - [[file:specific.md#fleshlight-launch-f-w12cmd][FleshlightLaunchFW12Cmd]]
  - [[file:specific.md#lovense-cmd][LovenseCmd]]
- [[file:jsonschema.md#message-json-schema][Message JSON Schema]]

* Introduction
:PROPERTIES:
:EXPORT_FILE_NAME: README.md
:END:
** The Buttplug Sex Toy Control Standard

*Version:* 0.0.1
*Documentation Repo*: [[https://github.com/metafetish/buttplug][https://github.com/metafetish/buttplug]]

Buttplug is a quasi-standard set of technologies and protocols to
allow developers to write software that controls an array of sex toys
in a semi-future-proof way.

*** The Need for a Sex Toy Control Standard

If a user wants to access a computer controlled sex toy in a way not
supported by the original manufacturer, the requirement list to is not
trivial. There are some major hurdles between obtaining a sex toy and
having DIY control of it:

- Experience in the operating system the user will want to access the
  sex toy from, including capabilities and programming interfaces to
  work with the connection medium (serial/usb/bluetooth/etc)
- Experience using a programming language that allows the user access
  to hardware via the operation system.
- Knowledge of the communications protocol the sex toy uses. This is
  rarely, if ever, publicly documented information.

The Buttplug Sex Toy Control Standard seeks to lower these bars as
much as possible.

- By proposing a standard that can be implemented in a cross-platform
  way, software based on the Buttplug Standard can reduce the amount
  of knowledge required to access hardware from a certain operating
  system or platform. Using technologies like Cordova or Xamarin to
  build software that implements Buttplug means that access could
  happen via desktop or mobile platforms.
- By standardizing the methods that can be used to talk to these toys,
  implementations of the standard can happen in multiple languages and
  still interact with each other. This opens development opportunities
  to multiple communities and ecosystems.
- Assuming some sort of widespread adoption happens, this could drive
  the commercial market to build toys with the Buttplug Standard in
  mind, or even to use it directly. Until that point, the portion of
  the community familiar with reverse engineering can help open sex
  toy access to those who are interested in controlling the toys.

*** Generalized Control

One of the windmills Buttplug tilts at is the idea of "generalized
control". Simply put, is it viable to drive completely different sex
toys from the same control signal? In some cases, this is simple. In
others, it may be impossible.

Starting with the simple case, let's say a user has two sex toys,
called Toy A and Toy B:

- Each toy is made by a different manufacturer.
- One toy uses Bluetooth to talk to the computer, the other uses USB.
- Both of these toys have vibration functionality.

The user has a particular function they would like to implement in a
software application, which would utilize the vibration function of
both toys.

Without Buttplug, this would require knowing how to talk to both USB
and Bluetooth, and also knowing how each of these toys communicates
with the computer in order to control vibration levels. They would
then have to add both of these to their application.

With Buttplug, Server implementations are expected to take care of the
different manufacturer and hardware communication requirements.
However, if there were only ways to communicate with specific
hardware, the application they were making would have to provide
separate logic paths to cover either toy instance.

This is where the idea of "generalized haptics" comes in. Instead of
either a "Toy A" or "Toy B" command to the server, the user can just
send a "Vibrate" command to the server, along with the identifier for
which toy they wanted to use. Not only that, their software would work
with any toy (including toys they do not own/have tested with) that
could translate the "Vibrate" command.

Now, the not so simple case.

Let's add Toy C, an electrostimulation unit. To use Toy C with the
same application as Toy A and Toy B, the Vibrate command has to be
translated into some facsimile that is valid for estim. While this is
most likely not tractable for a global solution, the goal of Buttplug
is to make explorations of ideas like this accessible and easy to play
with.

*** Comparisons to Existing Software

It's somewhat difficult to point to a real world counterpart for the
Buttplug Standard. While companies like [[http://twitter.com/frixionme][Frixion]] and [[http://feelme.com][FeelMe]] have
created systems for controlling different sex toys, neither of those
is open source, so it's hard to point at them as examples.

The closest existing projects are those which reinterpret or
generalize control schemes. Projects like:

- [[http://andersmalmgren.github.io/FreePIE/][FreePIE]]
- [[https://osculator.net/][OSCulator]]
- [[https://github.com/vrpn/vrpn/wiki][VRPN]]
- [[http://vjoystick.sourceforge.net/site/][vJoy]]

All of these programs take input from various devices and translate
them as some other kind of input, or aggregate them to make systems
easier to use. The Buttplug Standard aims to define programs which do
something similar. Applications referred to as "Buttplug Server"
implementations will often look quite similar to these programs.

*** Why is it called Buttplug?

It probably seems silly to call a sex toy control standard "Buttplug".

That's because it is.

I could probably call this project something neutral like STCS, but
I've been referring to computer controlled sex toys as "Internet
Buttplugs" for years, and that's what influenced the name of this
project. It's hard to pick terms for these products.

- "Sex toy" is weighed down by the word "toy". This is part of the
  reason the academic and tech community is flocking toward "sex
  robot" even when discussing technology that would've been called a
  sex toy a decade ago.
- "Sex robot" has way too many connotations, be it Cherry 2000 or
  robotics academics writing media-friendly PhD theses.
- "Adult novelty" just sounds stale and corporate. You buy adult
  novelties in bulk from warehouses. You go to adult novelty
  conventions.
- "Marital aide" No.

I ended up with "Internet Buttplug" because everyone has a butt, and
buttplug is a fun word to say. It's inclusive and it's humorous. I
admit that it may confuse people when they're wondering why they're
using something called Buttplug to control their fucking machine or
robotic onahole or who knows what else.

One of the hardest problems in Computer Science is naming things. I
just stopped trying to name the thing and selected a name and here we
are. Much like the other hard problems in Computer Science, I fully
expect this to come back to bite me in the ass at some point.

*Please Note:* Even though this project is called Buttplug, it does
not mean you have to put something in your butt to develop with it or
use applications that integrate it. We are not saying you shouldn't,
as we condone butt stuff as performed in a safe and sane manner, but
it's not a requirement, either.

* Architecture
:PROPERTIES:
:EXPORT_FILE_NAME: architecture.md
:END:
** Architecture
*** Implementation Types

The Buttplug Standard can be implemented in different ways. This
section covers the terms used throughout this document.

**** Libraries

Implementing the standard as a library for a certain programming
language allows developers to either build servers on top of the
library in that language, or to integrate the library into their
applications that also use that language (or FFI/bindings to that
language). For instance, the C# implementation of the Buttplug
Standard can be used with a WebSocket implementation on top of it to
be a server that other applications can talk to. It could also be
compiled into a Unity game so that the communication exists only in
the executable itself.

**** Servers

As mentioned above, servers are a thin layer on top of a library that
allow other applications to access hardware managed by the server. For
instance, a Web Application may not have the capability to talk to
hardware by itself, but can connect with a Buttplug Server
implementation via HTTP, WebSockets, or other standardized protocols.
Programs like Max/MSP and Pd could communicate with a Buttplug Server
implementation via OSC.

**** Applications (aka Clients)

Applications, or clients, refer to programs that in some way interact
with a server to perform some sort of job for the user. A few ideas
for applications:

- A movie player that sends synchronization commands while playing an
  encoded video.
- A music player that syncs sex toys with the BPM of the current
  track.
- A video game that somehow involves sex toy interaction

All of these would need to talk to a Buttplug server to establish
which devices to use, then communicate with those devices.

*** Protocol

The Buttplug Standard defines a message based protocol between a
client and a server. Note that the use of client and server here does
not explicitly denote network connection. These terms are used as a
generic way to denote different communication endpoints.

Client are expected to request information from the server about
devices that are connected, and to send information to those devices
via the server. Servers will handle device enumeration, connection
management, and failure recoveries (for instance, stopping all
connected devices on client disconnect).

While serialization formats are not yet standardized, current
references implementations of the Standard use JSON for serialization.
More information on this is available in the Messages section.

*** Stages

Buttplug sessions consist of 3 stages. While these stages need not be
discrete, due to the way Buttplug will likely be used, they will
usually end up being so. Applications may hide or combine some of the
stages depending on requirements.

**** Identification

During the identification stage, a client will establish connection
with the server, and send over its identifying information. The server
may trigger some sort of UI event at this point to ask if the user
will allow the client to connect and interact.

**** Enumeration

After the client/server connection is set up, device enumeration can
begin. The client can ask the server to scan for devices on various
busses or media (serial, usb, bluetooth, network, etc), and return a
list of devices it can communicate with.

**** Consummation

Once devices are found and selected, we can assume the user will begin
interacting with connected devices. At this point, the client will
mostly be sending and receiving device commands. It can usually (but
not always) be assumed that continued enumeration may not be possible
due to the context of situations that Buttplug software will be used
in.

* Usage Examples
:PROPERTIES:
:EXPORT_FILE_NAME: usages.md
:END:
** Usage Examples

To concretize this otherwise theoretical discussion, here are some
in-depth examples of how Buttplug implementations could be architected
in the wild.

*** Library Embedded in a Video Game

First off, a simple example using a single program with an embedded
library.

A developer would like to ship a game on Windows, using the Unity
Engine, that has some sort of interaction with sex toys. Since we want
concrete examples here, let's say it's a version of Tetris that
increases vibrator speeds based on how many lines have been made by
the player.

Due to the nature of games, the developer would want it to have as
little impact on performance as possible. They would also want the
server to exist in the game executable, so that it can be shipped as a
single package.

In this case, the developer could use a Buttplug library
implementation, possibly the C# reference library since this is Unity.
Inside the game, device connection configuration could be part of the
game settings menus, allow devices to be automatically reconnected on
game startup. To communicate with the embedded server during gameplay,
C# message objects could be sent to a thread for handling, so that IO
timing doesn't lag the game loop.

One of the important things lost by direct library integration is the
ability to support new hardware. If a game is simple sending a generic
"Vibrate" command, it is basically future-proofed for all toys that
will support that command in the future, assuming it has a way to send
that message to something that supports the new hardware. If a library
is compiled into the game, there would be no way to add this hardware
support though. There are multiple solutions to this issue, but those
are outside the scope of this example.

*** Web Based Hardware Synced Movie Player

Now, a far more difficult scenario. This example tries to build a
shotgun to hit as many platforms as possible with as little code as
possible.

The goal is to build a web based movie player, that will load movies
with synchronization files, and play them back while controlling
hardware. We will assume we are working with browsers that give us a
minimum of HTML5 Video playback and WebSockets. We want our
application to work on as many platforms as possible. The movie player
should be capable of talking to as many devices as possible on as many
platforms as possible, including desktop and mobile. The main focus
for toy support will be Bluetooth LE toys, with all others considered
nice to have.

At this point, we have to take operating system and browser
capabilities into account.

Operating Systems that have BLE:

- Windows 10 (Version 15063 and later)
- macOS (10.6 or later)
- Linux (with Bluez 5.22 or later)
- Android (version 5 or later)
- iOS (LE support versions unknown)
- ChromeOS (LE support versions unknown)

Web Browsers with WebBluetooth:

- Chrome 56 on Mac, Linux, Android, ChromeOS

This means that if we implement a Buttplug Server in Javascript using
WebBluetooth to access BLE devices, we can target the Chrome web
browser and support 2 major desktop platforms, 1 mobile platform, and
whatever ChromeOS is. We can also ship this server implementation as
part of the movie player application, meaning it will all work as a
unit, similar to the game example above. Future-proofing could
feasibly happen with CDN hosting of the library via semantic
versioning adherence.

Unfortunately, that leaves out Windows and iOS. To maximize ROI on
custom support implementation, we're more likely to see more users via
Windows than iOS, so we'll concentrate on Windows first.

To talk to Bluetooth LE on Windows 10 requires access to UWP APIs, so
following a "When In Rome" philosophy, we can implement a Buttplug
Library in C#. On top of this we can build a server exposed via
WebSockets, to let the browser application talk to the native server.
A native implementation gives us the extra win of USB and Serial, at
least, until WebUSB sex toys become a thing.

Going back to the web application itself, this now means the client
side will need to connect to one of two different styles of servers.
We can use User Agent Detection in the browser to let us know which OS
we're on, and then either select the WebBluetooth path or native
Windows Websocket path.

To hit iOS, we now have the option of going via a Xamarin based C#
app, or a Node.js/Cordova app. There will be some custom
implementation on either side, but most of the heavy lifting will have
been done before this.

An aside for those wondering why this wasn't all done in Node.js. At
the time of this writing, node.js bindings to UWP APIs do exist, but
were still iffy at best. Not only that, distributing a native
application like the Buttplug Server would've required wrapping in
something like nw.js, massively inflating distributable size.
Implementing a C# version of the Buttplug Library also gives us a
platform into Unity integration.
* Messages
:PROPERTIES:
:EXPORT_FILE_NAME: messages.md
:END:
** Messages

Messages are the core of communication for Buttplug.

How messages are represented depends on the implementation in
question. For instance, in a C# library implementation of Buttplug,
messages are classes. In Rust, they're structs.

In a server implementation, messages need to be serialized in some way
to be sent between the client and server. In this case, they may exist
in some sort of intermediate format, like JSON or OSC.

*** Basic Message Structure

Messages are made up of multiple different kinds of fields. As long as
the fields can somehow be represented in JSON, we consider them valid.

All messages will contain an "Id" field. This field as the range of 0
to 4294967295. A value to 0 denotes a /System/ message, meaning a
message that will only ever be sent from a server/library to a client.
All messages coming from a client will have an Id from 1 to
4294967295, as set by the client themselves. When the server replies
to the message, it will return a message using the same Id as was
sent. This allows developers to synchronize messages over remote
systems like networks, or languages that lack async/await
capabilities.

Other than range, there is no restriction to what values the client
can send as an Id. The Id does not need to be sequential, nor does it
need to be unique. The client could just send 1 for every message,
which would be valid in async/await library situations where the
execution flow would handle matching message pairs without the need
for the Id. In remote situations, like those over network connections,
it is expected that the client will establish a sane usage of the Id
field to orchestrate messaging.

*** Message Flow

There are two types of message flows.

- Messages can be sent from the server/library to a client. Messages
  like DeviceAdded, DeviceRemoved, and certain device specific input
  messages can happen without the client making a request. The server
  will not expect a reply from the client for these messages.
- Messages sent from the client to the server will always receive a
  reply from the server. The message type the client will receive in
  reply is based on the type of message sent. Some messages may
  receive a simple "Ok" message in reply in order to denote successful
  receiving, while others may receive something context specific.
  Messages reply types are listed in the message descriptions section.

*** A Note On Scaling

The Buttplug Message System, as described here, was not designed to
scale to large multiuser systems (like cam services). It was built
with either a single user, peer-to-peer, or small group setting in
mind.

As the message flow section states, this system resembles a sort of
half-assed-TCP mechanism. Using this system to drive large scale toy
control streaming services may require changes to this system.

Reducing and rearchitecting this system for scaling is an exercise
left to the developer. Either to implement, or to contract the
Buttplug designers to build it for them.

*** JSON Message Serialization

For reference implementations of the Buttplug standard, we use JSON
for serialization. The format of the json object for each specific
message mimics that of object output from Rust's [[https://github.com/serde-rs/json][serde-json]] crate.
This is simply due to the first implementation of Buttplug with
working serialization being in Rust.

When sending messages over the line to a server/client, we wrap them
in a JSON array, so that multiple messages can be sent and parsed
simultaneously.

The format is as follows:

#+BEGIN_SRC json
  [
    {
      "MessageType" :
      {
        "MessageField1": "MessageValue1",
        "MessageField2": "MessageValue2"
      }
    },
    {
      "MessageType2" :
      {
        "Message2Field1": "Message2Value1",
        "Message2Field2": "Message2Value2"
      }
    }
  ]
#+END_SRC

Message descriptions in this document will reflect this layout.

Similarly, some message values will have certain bounds and
limitations. These are described in this documentation, and are
included in the JSON schema in this repo.

*** Adding New Messages

The message list as described here is not set in stone. New messages
will be added as new devices are released, or as new generic messages
are deemed necessary. The only rule is that once a message is added to
this document, it should never be changed. This will allow parsing and
schema checking to be as strict as possible. If edits to a message
need to be made, a new message type will most likely be added.

Requests for new messages can be submitted to [[https://github.com/metafetish/buttplug/issues][the Buttplug Standard
Github Issue Tracker]].

*Note:* As of this writing, we're not even to an alpha release yet, so
all bets are off until we're at least a few release cycles into this.
Good luck, godspeed, prepare to update your parser code often. Or
maybe just use a reference implementation for now.

*** Message Description Template

*Description:*

*Fields:*

*Expected Response:*

*Flow Diagram:*

*Serialization Example:*

* Status Messages
:PROPERTIES:
:EXPORT_FILE_NAME: status.md
:END:
** Status Messages
*** Ok
*Description:* Signifies that the previous message sent by the client
was received and processed successfully by the server.

*Fields:*

- /Id/ (unsigned int): The Id of the client message that this reply is in response
  to.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file ok_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StartScanning, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
}
#+END_SRC

#+RESULTS:
[[file:ok_diagram.svg]]

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "Ok": {
        "Id": 1
      }
    }
  ]
#+END_SRC

*** Error
*Description:* Signifies that the previous message sent by the client
caused some sort of parsing or processing error on the server.

*Fields:*

- /Id/ (unsigned int): The Id of the client message that this reply is
  in response to, assuming the Id could be parsed. Id will be 0 if
  message could not be parsed (due to issues like invalid JSON).
- /ErrorMessage/ (string): Message describing the error that happened
  on the server.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file error_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "InvalidMessageName, Id=2" ];
  Server -> Client [ label = "Error, Id=2" ];
}
#+END_SRC

#+BEGIN_SRC mscgen :file error_malformed_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "InvalidMessageId, Id=Wat" ];
  Server -> Client [ label = "Error, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "Error": {
        "Id": 0,
        "ErrorMessage": "Server received invalid JSON."
      }
    }
  ]
#+END_SRC

*** Ping
*Description:* Ping acts a watchdog between the client and the server.
The server will expect the client to send a ping message at a certain
interval (interval will be sent to the client as part of the
identification step). If the client fails to ping within the specified
time, the server will disconnect and stop all currently connected
devices.

This will handle cases like the client crashing without a
proper disconnect. This is not a guaranteed global failsafe, since it
will not guard against problems like a client UI thread locking up
while a client communication thread continues to work.

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

- Ok message with matching Id on successful logging request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file ping_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "Ping, Id=5" ];
  Server -> Client [ label = "Ok, Id=5" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "Ping": {
        "Id": 5
      }
    }
  ]
#+END_SRC
*** RequestLog
*Description:* Requests that the server send all internal log messages
to the client. Useful for debugging.

*Fields:*

- /Id/ (unsigned int): Message Id
- /LogLevel/ (string): The highest level of message to receive.
  Sending "Off" turns off messages, while sending "Trace" denotes that
  all log messages should be sent to the client. Valid LogLevel values:
  - Off
  - Fatal
  - Error
  - Warn
  - Info
  - Debug
  - Trace

*Expected Response:*

- Ok message with matching Id on successful logging request. Assuming
  the LogLevel was not "Off", Log type messages will be received after this.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file requestlog_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestLog, Id=1, LogLevel=Trace" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "Log, Id=0, LogLevel=Warn" ];
  Server -> Client [ label = "Log, Id=0, LogLevel=Trace" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "RequestLog": {
        "Id": 1,
        "LogLevel": "Warn"
      }
    }
  ]
#+END_SRC

*** Log
*Description:* Log message from the server. Only sent after the client
has sent a RequestLog message with a level other than "Off".

*Fields:*

- /Id/ (unsigned int): Message Id
- /LogLevel/ (string): The level of the log message.
  - Off
  - Fatal
  - Error
  - Warn
  - Info
  - Debug
  - Trace
- /LogMessage/ (string): Log message.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file log_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestLog, Id=1, LogLevel=Trace" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "Log, Id=0, LogLevel=Warn" ];
  Server -> Client [ label = "Log, Id=0, LogLevel=Trace" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "Log": {
        "Id": 0,
        "LogLevel": "Trace",
        "LogMessage": "This is a Log Message."
      }
    }
  ]
#+END_SRC

* Identification Messages
:PROPERTIES:
:EXPORT_FILE_NAME: identification.md
:END:
** Identification Messages
*** RequestServerInfo
*Description:* Sent by the client to register itself with the server,
and request info from the server.

*Fields:*

- /Id/ (unsigned int): Message Id
- /ClientName/ (string): Name of the client, for the server to use for
  UI if needed. Cannot be null.

*Expected Response:*

- ServerInfo message on success
- Error message on malformed message, null client name, or other
  error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file requestserverinfo_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestServerInfo, Id=1" ];
  Server -> Client [ label = "ServerInfo, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "RequestServerInfo": {
        "Id": 1,
        "ClientName": "Test Client"
      }
    }
  ]
#+END_SRC
*** ServerInfo
*Description:* Send by server to client, contains information about
the server name (optional), template version, and ping time
expectations.

*Fields:*

- /Id/ (unsigned int): Message Id
- /ServerName/ (string): Name of the server. Can be null (0-length).
- /MessageVersion/ (string): Semantic version for the message
  template the server uses.
- /MaxPingTime/ (unsigned int): Maximum internal for pings from the
  client, in milliseconds. If a client takes to longer than this time
  between sending Ping messages, the server is expected to disconnect.

*Expected Response:*

None. Server-To-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file serverinfo_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestServerInfo, Id=1" ];
  Server -> Client [ label = "ServerInfo, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "ServerInfo": {
        "Id": 1,
        "ServerName": "Test Server",
        "MessageVersion": "0.0.1",
        "MaxPingTime": 100
      }
    }
  ]
#+END_SRC
* Enumeration Messages
:PROPERTIES:
:EXPORT_FILE_NAME: enumeration.md
:END:
** Enumeration Messages
*** StartScanning
*Description:* Client request to have the server start scanning for
devices on all busses that it knows about. Useful for protocols like
Bluetooth, which require an explicit discovery phase.

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

- Ok message with matching Id on successful request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file startscanning_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StartScanning, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "StartScanning": {
        "Id": 1
      }
    }
  ]
#+END_SRC
*** StopScanning
*Description:* Client request to have the server stop scanning for
devices. Useful for protocols like Bluetooth, which may not timeout
otherwise.

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

- Ok message with matching Id on successful request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file stopscanning_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StartScanning, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
  Client -> Server [ label = "StopScanning, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "ScanningFinished, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "StopScanning": {
        "Id": 1
      }
    }
  ]
#+END_SRC
*** ScanningFinished
*Description:* Sent by the server once it has stopped scanning on all
busses. Since systems may have timeouts that are not controlled by the
server, this is a separate message from the StopScanning flow.
ScanningFinished can happen without a StopScanning call.

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

None. Server-to-Client only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file scanningfinished_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StartScanning, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
  Server -> Client [ label = "DeviceAdded, Id=0" ];
  Server -> Client [ label = "ScanningFinished, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "ScanningFinished": {
        "Id": 0
      }
    }
  ]
#+END_SRC
*** RequestDeviceList
*Description:* Client request to have the server send over its known
device list, without starting a full scan.

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

- DeviceList message with matching Id on successful request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file requestdevicelist_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestDeviceList, Id=1" ];
  Server -> Client [ label = "DeviceList, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "RequestDeviceList": {
        "Id": 1
      }
    }
  ]
#+END_SRC
*** DeviceList
*Description:* Server reply to a client request for a device list.

*Fields:*

- /Id/ (unsigned int): Message Id
- /Devices/ (array): Array of device objects
  - /DeviceName/ (string): Descriptive name of the device
  - /DeviceIndex/ (unsigned integer): Index used to identify the
    device when sending Device Messages.
  - /DeviceMessages/ (array of strings): Type names of Device Messages
    that the device will accept.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file devicelist_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "RequestDeviceList, Id=1" ];
  Server -> Client [ label = "DeviceList, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "DeviceList": {
        "Id": 1,
        "Devices": [
          {
            "DeviceName": "TestDevice 1",
            "DeviceIndex": 0,
            "DeviceMessages": ["SingleMotorVibrateCmd", "RawCmd", "KiirooCmd", "StopDeviceCmd"]
          },
          {
            "DeviceName": "TestDevice 2",
            "DeviceIndex": 1,
            "DeviceMessages": ["SingleMotorVibrateCmd", "LovenseCmd", "StopDeviceCmd"]
          }
        ]
      }
    }
  ]
#+END_SRC
*** DeviceAdded
*Description:* Sent by the server whenever a device is added to the
system. Can happen at any time after identification, as it is assumed
many server/library implementations will support devices with
hotplugging capabilities that do not require specific
scanning/discovery sessions.

*Fields:*

- /Id/ (unsigned int): Message Id
- /DeviceName/ (string): Descriptive name of the device
- /DeviceIndex/ (unsigned integer): Index used to identify the
  device when sending Device Messages.
- /DeviceMessages/ (array of strings): Type names of Device Messages
  that the device will accept.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file deviceadded_diagram.svg :filetype svg
msc {
  Client,Server;
  Server -> Client [ label = "DeviceAdded, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "DeviceAdded": {
        "Id": 0,
        "DeviceName": "TestDevice 1",
        "DeviceIndex": 0,
        "DeviceMessages": ["SingleMotorVibrateCmd", "RawCmd", "KiirooCmd", "StopDeviceCmd"]
      }
    }
  ]
#+END_SRC
*** DeviceRemoved
*Description:* Sent by the server whenever a device is removed from
the system. Can happen at any time after identification.

*Fields:*

- /Id/ (unsigned int): Message Id
- /DeviceIndex/ (unsigned integer): Index used to identify the
  device when sending Device Messages.

*Expected Response:*

None. Server-to-Client message only.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file deviceremoved_diagram.svg :filetype svg
msc {
  Client,Server;
  Server -> Client [ label = "DeviceRemoved, Id=0" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
  [
    {
      "DeviceRemoved": {
        "Id": 0,
        "DeviceIndex": 0
      }
    }
  ]
#+END_SRC
* Generic Device Messages
:PROPERTIES:
:EXPORT_FILE_NAME: generic.md
:END:
** Generic Device Messages
*** StopDeviceCmd
*Description:* Client request to have the server stop a device from
whatever actions it may be taking. This message should be supported by
all devices, and the server should know how to stop any device it
supports.

*Fields:*

- /Id/ (unsigned int): Message Id
- /DeviceIndex/ (unsigned int): Index of device to stop.

*Expected Response:*

- Ok message with matching Id on successful request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file stopdevice_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StopDeviceCmd, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
    [
      {
        "StopDeviceCmd": {
          "Id": 1,
          "DeviceIndex": 0
        }
      }
    ]
#+END_SRC
*** StopAllDevices
*Description:* Sent by the client to tell the server to stop all
devices. Can be used for emergency situations, on client shutdown for
cleanup, etc... While this is considered a Device Message, since it
pertains to all currently connected devices, it does not specify a
device index (and does not end with 'Cmd').

*Fields:*

- /Id/ (unsigned int): Message Id

*Expected Response:*

- Ok message with matching Id on successful request.
- Error message on value or message error.

*Flow Diagram:*

#+BEGIN_SRC mscgen :file stopalldevices_diagram.svg :filetype svg
msc {
  Client,Server;
  Client -> Server [ label = "StopAllDevices, Id=1" ];
  Server -> Client [ label = "Ok, Id=1" ];
}
#+END_SRC

*Serialization Example:*

#+BEGIN_SRC json
    [
      {
        "StopAllDevices": {
          "Id": 1
        }
      }
    ]
#+END_SRC
*** SingleMotorVibrateCmd
*** RawCmd
* Specific Device Messages
:PROPERTIES:
:EXPORT_FILE_NAME: specific.md
:END:
** Specific Device Messages
*** KiiroCmd
*** FleshlightLaunchFW12Cmd
*** LovenseCmd
* Message JSON Schema
:PROPERTIES:
:EXPORT_FILE_NAME: jsonschema.md
:END:
** Message JSON Schema
#+INCLUDE: ../schema/buttplug-schema.json src json
